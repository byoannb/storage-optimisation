---
title: "projet_algo"
format: html
editor: visual
---

```{r}
mem = sample(100:1000, size=5, replace=TRUE)
l = sample(1:100, size=25, replace=TRUE)
jeux = sort(l, decreasing = TRUE)
mem = sort(mem, decreasing = TRUE)

mat = matrix(0, nrow = length(mem), ncol = length(jeux))

print(jeux)
cat('\n')
print(mem)
```

```{r}
storage_opti <- function(storages, games){
  
  games = sort(games, decreasing = TRUE)
  storages = sort(storages, decreasing = TRUE)
  
  i_mem = 1
  j_jeu = 1
  mat = matrix(0, nrow = length(storages), ncol = length(games))
  colnames(mat) = games
  rownames(mat) = storages
  
  while(length(games) != 0 && i_mem <= length(storages) && j_jeu <= length(games)){
    if (storages[i_mem] - games[j_jeu] >= 0){
        storages[i_mem] = storages[i_mem] - games[j_jeu]
        mat[i_mem, j_jeu] = 1
        j_jeu = j_jeu + 1
    }
    else {
      i_mem = i_mem + 1
    }
  }
  cat(sum(rowSums(mat) != 0), "out of", length(storages), "storage facilities were used \n")
  cat(sum(colSums(mat)), "out of", length(games), "games could be stored")
  return(mat)
}
```

```{r}
mem = sample(1:5000, size=3, replace=FALSE)
jeux = sample(1:100, size=10, replace=TRUE)
```

```{r}
algo <- function(mem, jeux){
  p = length(mem)
  n = length(jeux)
  
  max = 0
  vect_max = c()
  vect <- as.matrix(expand.grid(rep(list(0:p), n)))
  mat = matrix(0, nrow = p, ncol = n)
  
  mem_count = matrix(0, ncol = p)
  
  for (j in 1:dim(vect)[1]){
    for (i in 1:length(vect[j,])) {
      if (vect[j,i] == 0){
        next
      }
      else{
        mat[vect[j,i], i] <- 1
        mem_count[vect[j,i]] = mem_count[vect[j,i]] + jeux[i]
      }
    }
    if (all(mem_count <= mem)){
      if (sum(rowSums(mat)) > max){
        vect_max = vect[j,]
        max = sum(rowSums(mat))
      }
    }
  }
  
  return(list(max=max, vect_max=vect_max))
}

algo(mem, jeux)
```
